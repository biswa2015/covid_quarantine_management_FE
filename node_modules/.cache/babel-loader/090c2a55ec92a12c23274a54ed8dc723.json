{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexport default (function (Base) {\n  return function (_Base) {\n    _inherits(_class, _Base);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: 'UNSAFE_componentWillMount',\n      value: function UNSAFE_componentWillMount() {\n        this.setStateWithData(this.getDataModel(this.getResolvedState(), true));\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.fireFetchData();\n      }\n    }, {\n      key: 'UNSAFE_componentWillReceiveProps',\n      value: function UNSAFE_componentWillReceiveProps(nextProps, nextState) {\n        var oldState = this.getResolvedState();\n        var newState = this.getResolvedState(nextProps, nextState); // Do a deep compare of new and old `defaultOption` and\n        // if they are different reset `option = defaultOption`\n\n        var defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded'];\n        defaultableOptions.forEach(function (x) {\n          var defaultName = 'default' + (x.charAt(0).toUpperCase() + x.slice(1));\n\n          if (JSON.stringify(oldState[defaultName]) !== JSON.stringify(newState[defaultName])) {\n            newState[x] = newState[defaultName];\n          }\n        }); // If they change these table options, we need to reset defaults\n        // or else we could get into a state where the user has changed the UI\n        // and then disabled the ability to change it back.\n        // e.g. If `filterable` has changed, set `filtered = defaultFiltered`\n\n        var resettableOptions = ['sortable', 'filterable', 'resizable'];\n        resettableOptions.forEach(function (x) {\n          if (oldState[x] !== newState[x]) {\n            var baseName = x.replace('able', '');\n            var optionName = baseName + 'ed';\n            var defaultName = 'default' + (optionName.charAt(0).toUpperCase() + optionName.slice(1));\n            newState[optionName] = newState[defaultName];\n          }\n        }); // Props that trigger a data update\n\n        if (oldState.data !== newState.data || oldState.columns !== newState.columns || oldState.pivotBy !== newState.pivotBy || oldState.sorted !== newState.sorted || oldState.filtered !== newState.filtered) {\n          this.setStateWithData(this.getDataModel(newState, oldState.data !== newState.data));\n        }\n      }\n    }, {\n      key: 'setStateWithData',\n      value: function setStateWithData(newState, cb) {\n        var _this2 = this;\n\n        var oldState = this.getResolvedState();\n        var newResolvedState = this.getResolvedState({}, newState);\n        var freezeWhenExpanded = newResolvedState.freezeWhenExpanded; // Default to unfrozen state\n\n        newResolvedState.frozen = false; // If freezeWhenExpanded is set, check for frozen conditions\n\n        if (freezeWhenExpanded) {\n          // if any rows are expanded, freeze the existing data and sorting\n          var keys = Object.keys(newResolvedState.expanded);\n\n          for (var i = 0; i < keys.length; i += 1) {\n            if (newResolvedState.expanded[keys[i]]) {\n              newResolvedState.frozen = true;\n              break;\n            }\n          }\n        } // If the data isn't frozen and either the data or\n        // sorting model has changed, update the data\n\n\n        if (oldState.frozen && !newResolvedState.frozen || oldState.sorted !== newResolvedState.sorted || oldState.filtered !== newResolvedState.filtered || oldState.showFilters !== newResolvedState.showFilters || !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData) {\n          // Handle collapseOnsortedChange & collapseOnDataChange\n          if (oldState.sorted !== newResolvedState.sorted && this.props.collapseOnSortingChange || oldState.filtered !== newResolvedState.filtered || oldState.showFilters !== newResolvedState.showFilters || oldState.sortedData && !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData && this.props.collapseOnDataChange) {\n            newResolvedState.expanded = {};\n          }\n\n          Object.assign(newResolvedState, this.getSortedData(newResolvedState));\n        } // Set page to 0 if filters change\n\n\n        if (oldState.filtered !== newResolvedState.filtered) {\n          newResolvedState.page = 0;\n        } // Calculate pageSize all the time\n\n\n        if (newResolvedState.sortedData) {\n          newResolvedState.pages = newResolvedState.manual ? newResolvedState.pages : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize);\n          newResolvedState.page = newResolvedState.manual ? newResolvedState.page : Math.max(newResolvedState.page >= newResolvedState.pages ? newResolvedState.pages - 1 : newResolvedState.page, 0);\n        }\n\n        return this.setState(newResolvedState, function () {\n          if (cb) {\n            cb();\n          }\n\n          if (oldState.page !== newResolvedState.page || oldState.pageSize !== newResolvedState.pageSize || oldState.sorted !== newResolvedState.sorted || oldState.filtered !== newResolvedState.filtered) {\n            _this2.fireFetchData();\n          }\n        });\n      }\n    }]);\n\n    return _class;\n  }(Base);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAe;AAAA;AAAAA;;AAAA;AAAAC;;AAAA;AAAA;;AAAAC;AAAAC;AAAAC,kDAEkB;AAC3B,aAAKC,gBAAL,CAAsB,KAAKC,YAAL,CAAkB,KAAKC,gBAAL,EAAlB,EAA2C,IAA3C,CAAtB;AACD;AAJU;AAAAJ;AAAAC,0CAMU;AACnB,aAAKI,aAAL;AACD;AARU;AAAAL;AAAAC,uDAUuBK,SAVvB,EAUkCC,SAVlC,EAU6C;AACtD,YAAMC,WAAW,KAAKJ,gBAAL,EAAjB;AACA,YAAMK,WAAW,KAAKL,gBAAL,CAAsBE,SAAtB,EAAiCC,SAAjC,CAAjB,CAFsD,CAItD;AACA;;AACA,YAAMG,qBAAqB,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,EAAkC,UAAlC,CAA3B;AACAA,2BAAmBC,OAAnBD,CAA2B,aAAK;AAC9B,cAAME,2BAAwBC,EAAEC,MAAFD,CAAS,CAATA,EAAYE,WAAZF,KAA4BA,EAAEG,KAAFH,CAAQ,CAARA,CAApDD,CAAN;;AACA,cAAIK,KAAKC,SAALD,CAAeT,SAASI,WAATJ,CAAfS,MAA0CA,KAAKC,SAALD,CAAeR,SAASG,WAATH,CAAfQ,CAA9C,EAAqF;AACnFR,qBAASI,CAATJ,IAAcA,SAASG,WAATH,CAAdA;AACD;AAJH,WAPsD,CActD;AACA;AACA;AACA;;AACA,YAAMU,oBAAoB,CAAC,UAAD,EAAa,YAAb,EAA2B,WAA3B,CAA1B;AACAA,0BAAkBR,OAAlBQ,CAA0B,aAAK;AAC7B,cAAIX,SAASK,CAATL,MAAgBC,SAASI,CAATJ,CAApB,EAAiC;AAC/B,gBAAMW,WAAWP,EAAEQ,OAAFR,CAAU,MAAVA,EAAkB,EAAlBA,CAAjB;AACA,gBAAMS,aAAgBF,QAAhB,OAAN;AACA,gBAAMR,2BAAwBU,WAAWR,MAAXQ,CAAkB,CAAlBA,EAAqBP,WAArBO,KAAqCA,WAAWN,KAAXM,CAAiB,CAAjBA,CAA7DV,CAAN;AACAH,qBAASa,UAATb,IAAuBA,SAASG,WAATH,CAAvBA;AACD;AANH,WAnBsD,CA4BtD;;AACA,YACED,SAASe,IAATf,KAAkBC,SAASc,IAA3Bf,IACAA,SAASgB,OAAThB,KAAqBC,SAASe,OAD9BhB,IAEAA,SAASiB,OAATjB,KAAqBC,SAASgB,OAF9BjB,IAGAA,SAASkB,MAATlB,KAAoBC,SAASiB,MAH7BlB,IAIAA,SAASmB,QAATnB,KAAsBC,SAASkB,QALjC,EAME;AACA,eAAKzB,gBAAL,CAAsB,KAAKC,YAAL,CAAkBM,QAAlB,EAA4BD,SAASe,IAATf,KAAkBC,SAASc,IAAvD,CAAtB;AACD;AACF;AAhDU;AAAAvB;AAAAC,uCAkDOQ,QAlDP,EAkDiBmB,EAlDjB,EAkDqB;AAAA;;AAC9B,YAAMpB,WAAW,KAAKJ,gBAAL,EAAjB;AACA,YAAMyB,mBAAmB,KAAKzB,gBAAL,CAAsB,EAAtB,EAA0BK,QAA1B,CAAzB;AAF8B,YAGtBqB,kBAHsB,GAGCD,gBAHD,CAGtBC,kBAHsB,EAK9B;;AACAD,yBAAiBE,MAAjBF,GAA0B,KAA1BA,CAN8B,CAQ9B;;AACA,YAAIC,kBAAJ,EAAwB;AACtB;AACA,cAAME,OAAOC,OAAOD,IAAPC,CAAYJ,iBAAiBK,QAA7BD,CAAb;;AACA,eAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIH,KAAKI,MAAzB,EAAiCD,KAAK,CAAtC,EAAyC;AACvC,gBAAIN,iBAAiBK,QAAjBL,CAA0BG,KAAKG,CAALH,CAA1BH,CAAJ,EAAwC;AACtCA,+BAAiBE,MAAjBF,GAA0B,IAA1BA;AACA;AACD;AACF;AACF,SAlB6B,CAoB9B;AACA;;;AACA,YACGrB,SAASuB,MAATvB,IAAmB,CAACqB,iBAAiBE,MAArCvB,IACDA,SAASkB,MAATlB,KAAoBqB,iBAAiBH,MADpClB,IAEDA,SAASmB,QAATnB,KAAsBqB,iBAAiBF,QAFtCnB,IAGDA,SAAS6B,WAAT7B,KAAyBqB,iBAAiBQ,WAHzC7B,IAIA,CAACqB,iBAAiBE,MAAlB,IAA4BvB,SAAS8B,YAAT9B,KAA0BqB,iBAAiBS,YAL1E,EAME;AACA;AACA,cACG9B,SAASkB,MAATlB,KAAoBqB,iBAAiBH,MAArClB,IAA+C,KAAK+B,KAAL,CAAWC,uBAA1DhC,IACDA,SAASmB,QAATnB,KAAsBqB,iBAAiBF,QADtCnB,IAEDA,SAAS6B,WAAT7B,KAAyBqB,iBAAiBQ,WAFzC7B,IAGAA,SAASiC,UAATjC,IACC,CAACqB,iBAAiBE,MADnBvB,IAECA,SAAS8B,YAAT9B,KAA0BqB,iBAAiBS,YAF5C9B,IAGC,KAAK+B,KAAL,CAAWG,oBAPf,EAQE;AACAb,6BAAiBK,QAAjBL,GAA4B,EAA5BA;AACD;;AAEDI,iBAAOU,MAAPV,CAAcJ,gBAAdI,EAAgC,KAAKW,aAAL,CAAmBf,gBAAnB,CAAhCI;AACD,SA3C6B,CA6C9B;;;AACA,YAAIzB,SAASmB,QAATnB,KAAsBqB,iBAAiBF,QAA3C,EAAqD;AACnDE,2BAAiBgB,IAAjBhB,GAAwB,CAAxBA;AACD,SAhD6B,CAkD9B;;;AACA,YAAIA,iBAAiBY,UAArB,EAAiC;AAC/BZ,2BAAiBiB,KAAjBjB,GAAyBA,iBAAiBkB,MAAjBlB,GACrBA,iBAAiBiB,KADIjB,GAErBmB,KAAKC,IAALD,CAAUnB,iBAAiBY,UAAjBZ,CAA4BO,MAA5BP,GAAqCA,iBAAiBqB,QAAhEF,CAFJnB;AAGAA,2BAAiBgB,IAAjBhB,GAAwBA,iBAAiBkB,MAAjBlB,GAA0BA,iBAAiBgB,IAA3ChB,GAAkDmB,KAAKG,GAALH,CACxEnB,iBAAiBgB,IAAjBhB,IAAyBA,iBAAiBiB,KAA1CjB,GACIA,iBAAiBiB,KAAjBjB,GAAyB,CAD7BA,GAEIA,iBAAiBgB,IAHmDG,EAIxE,CAJwEA,CAA1EnB;AAMD;;AAED,eAAO,KAAKuB,QAAL,CAAcvB,gBAAd,EAAgC,YAAM;AAC3C,cAAID,EAAJ,EAAQ;AACNA;AACD;;AACD,cACEpB,SAASqC,IAATrC,KAAkBqB,iBAAiBgB,IAAnCrC,IACAA,SAAS0C,QAAT1C,KAAsBqB,iBAAiBqB,QADvC1C,IAEAA,SAASkB,MAATlB,KAAoBqB,iBAAiBH,MAFrClB,IAGAA,SAASmB,QAATnB,KAAsBqB,iBAAiBF,QAJzC,EAKE;AACA0B,mBAAKhD,aAAL;AACD;AAXI,UAAP;AAaD;AA9HU;;AAAA;AAAA,IACCiD,IADD;AAAf","names":["_inherits","_classCallCheck","_createClass","key","value","setStateWithData","getDataModel","getResolvedState","fireFetchData","nextProps","nextState","oldState","newState","defaultableOptions","forEach","defaultName","x","charAt","toUpperCase","slice","JSON","stringify","resettableOptions","baseName","replace","optionName","data","columns","pivotBy","sorted","filtered","cb","newResolvedState","freezeWhenExpanded","frozen","keys","Object","expanded","i","length","showFilters","resolvedData","props","collapseOnSortingChange","sortedData","collapseOnDataChange","assign","getSortedData","page","pages","manual","Math","ceil","pageSize","max","setState","_this2","Base"],"sources":["/home/priyanko/covid_quarantine_management_FE/node_modules/react-table-6/src/lifecycle.js"],"sourcesContent":["export default Base =>\n  class extends Base {\n    UNSAFE_componentWillMount () {\n      this.setStateWithData(this.getDataModel(this.getResolvedState(), true))\n    }\n\n    componentDidMount () {\n      this.fireFetchData()\n    }\n\n    UNSAFE_componentWillReceiveProps (nextProps, nextState) {\n      const oldState = this.getResolvedState()\n      const newState = this.getResolvedState(nextProps, nextState)\n\n      // Do a deep compare of new and old `defaultOption` and\n      // if they are different reset `option = defaultOption`\n      const defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded']\n      defaultableOptions.forEach(x => {\n        const defaultName = `default${x.charAt(0).toUpperCase() + x.slice(1)}`\n        if (JSON.stringify(oldState[defaultName]) !== JSON.stringify(newState[defaultName])) {\n          newState[x] = newState[defaultName]\n        }\n      })\n\n      // If they change these table options, we need to reset defaults\n      // or else we could get into a state where the user has changed the UI\n      // and then disabled the ability to change it back.\n      // e.g. If `filterable` has changed, set `filtered = defaultFiltered`\n      const resettableOptions = ['sortable', 'filterable', 'resizable']\n      resettableOptions.forEach(x => {\n        if (oldState[x] !== newState[x]) {\n          const baseName = x.replace('able', '')\n          const optionName = `${baseName}ed`\n          const defaultName = `default${optionName.charAt(0).toUpperCase() + optionName.slice(1)}`\n          newState[optionName] = newState[defaultName]\n        }\n      })\n\n      // Props that trigger a data update\n      if (\n        oldState.data !== newState.data ||\n        oldState.columns !== newState.columns ||\n        oldState.pivotBy !== newState.pivotBy ||\n        oldState.sorted !== newState.sorted ||\n        oldState.filtered !== newState.filtered\n      ) {\n        this.setStateWithData(this.getDataModel(newState, oldState.data !== newState.data))\n      }\n    }\n\n    setStateWithData (newState, cb) {\n      const oldState = this.getResolvedState()\n      const newResolvedState = this.getResolvedState({}, newState)\n      const { freezeWhenExpanded } = newResolvedState\n\n      // Default to unfrozen state\n      newResolvedState.frozen = false\n\n      // If freezeWhenExpanded is set, check for frozen conditions\n      if (freezeWhenExpanded) {\n        // if any rows are expanded, freeze the existing data and sorting\n        const keys = Object.keys(newResolvedState.expanded)\n        for (let i = 0; i < keys.length; i += 1) {\n          if (newResolvedState.expanded[keys[i]]) {\n            newResolvedState.frozen = true\n            break\n          }\n        }\n      }\n\n      // If the data isn't frozen and either the data or\n      // sorting model has changed, update the data\n      if (\n        (oldState.frozen && !newResolvedState.frozen) ||\n        oldState.sorted !== newResolvedState.sorted ||\n        oldState.filtered !== newResolvedState.filtered ||\n        oldState.showFilters !== newResolvedState.showFilters ||\n        (!newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData)\n      ) {\n        // Handle collapseOnsortedChange & collapseOnDataChange\n        if (\n          (oldState.sorted !== newResolvedState.sorted && this.props.collapseOnSortingChange) ||\n          oldState.filtered !== newResolvedState.filtered ||\n          oldState.showFilters !== newResolvedState.showFilters ||\n          (oldState.sortedData &&\n            !newResolvedState.frozen &&\n            oldState.resolvedData !== newResolvedState.resolvedData &&\n            this.props.collapseOnDataChange)\n        ) {\n          newResolvedState.expanded = {}\n        }\n\n        Object.assign(newResolvedState, this.getSortedData(newResolvedState))\n      }\n\n      // Set page to 0 if filters change\n      if (oldState.filtered !== newResolvedState.filtered) {\n        newResolvedState.page = 0\n      }\n\n      // Calculate pageSize all the time\n      if (newResolvedState.sortedData) {\n        newResolvedState.pages = newResolvedState.manual\n          ? newResolvedState.pages\n          : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize)\n        newResolvedState.page = newResolvedState.manual ? newResolvedState.page : Math.max(\n          newResolvedState.page >= newResolvedState.pages\n            ? newResolvedState.pages - 1\n            : newResolvedState.page,\n          0\n        )\n      }\n\n      return this.setState(newResolvedState, () => {\n        if (cb) {\n          cb()\n        }\n        if (\n          oldState.page !== newResolvedState.page ||\n          oldState.pageSize !== newResolvedState.pageSize ||\n          oldState.sorted !== newResolvedState.sorted ||\n          oldState.filtered !== newResolvedState.filtered\n        ) {\n          this.fireFetchData()\n        }\n      })\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}